/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PasswordEntry } from "./PasswordEntry";
import { PasswordEntryCountArgs } from "./PasswordEntryCountArgs";
import { PasswordEntryFindManyArgs } from "./PasswordEntryFindManyArgs";
import { PasswordEntryFindUniqueArgs } from "./PasswordEntryFindUniqueArgs";
import { CreatePasswordEntryArgs } from "./CreatePasswordEntryArgs";
import { UpdatePasswordEntryArgs } from "./UpdatePasswordEntryArgs";
import { DeletePasswordEntryArgs } from "./DeletePasswordEntryArgs";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { PasswordEntryService } from "../passwordEntry.service";
@graphql.Resolver(() => PasswordEntry)
export class PasswordEntryResolverBase {
  constructor(protected readonly service: PasswordEntryService) {}

  async _passwordEntriesMeta(
    @graphql.Args() args: PasswordEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PasswordEntry])
  async passwordEntries(
    @graphql.Args() args: PasswordEntryFindManyArgs
  ): Promise<PasswordEntry[]> {
    return this.service.passwordEntries(args);
  }

  @graphql.Query(() => PasswordEntry, { nullable: true })
  async passwordEntry(
    @graphql.Args() args: PasswordEntryFindUniqueArgs
  ): Promise<PasswordEntry | null> {
    const result = await this.service.passwordEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PasswordEntry)
  async createPasswordEntry(
    @graphql.Args() args: CreatePasswordEntryArgs
  ): Promise<PasswordEntry> {
    return await this.service.createPasswordEntry({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PasswordEntry)
  async updatePasswordEntry(
    @graphql.Args() args: UpdatePasswordEntryArgs
  ): Promise<PasswordEntry | null> {
    try {
      return await this.service.updatePasswordEntry({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PasswordEntry)
  async deletePasswordEntry(
    @graphql.Args() args: DeletePasswordEntryArgs
  ): Promise<PasswordEntry | null> {
    try {
      return await this.service.deletePasswordEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  async getCategory(
    @graphql.Parent() parent: PasswordEntry
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: PasswordEntry): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
