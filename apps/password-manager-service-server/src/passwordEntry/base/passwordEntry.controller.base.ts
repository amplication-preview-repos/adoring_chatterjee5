/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PasswordEntryService } from "../passwordEntry.service";
import { PasswordEntryCreateInput } from "./PasswordEntryCreateInput";
import { PasswordEntry } from "./PasswordEntry";
import { PasswordEntryFindManyArgs } from "./PasswordEntryFindManyArgs";
import { PasswordEntryWhereUniqueInput } from "./PasswordEntryWhereUniqueInput";
import { PasswordEntryUpdateInput } from "./PasswordEntryUpdateInput";

export class PasswordEntryControllerBase {
  constructor(protected readonly service: PasswordEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PasswordEntry })
  async createPasswordEntry(
    @common.Body() data: PasswordEntryCreateInput
  ): Promise<PasswordEntry> {
    return await this.service.createPasswordEntry({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        notes: true,
        password: true,
        title: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PasswordEntry] })
  @ApiNestedQuery(PasswordEntryFindManyArgs)
  async passwordEntries(
    @common.Req() request: Request
  ): Promise<PasswordEntry[]> {
    const args = plainToClass(PasswordEntryFindManyArgs, request.query);
    return this.service.passwordEntries({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        notes: true,
        password: true,
        title: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PasswordEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async passwordEntry(
    @common.Param() params: PasswordEntryWhereUniqueInput
  ): Promise<PasswordEntry | null> {
    const result = await this.service.passwordEntry({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        notes: true,
        password: true,
        title: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PasswordEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePasswordEntry(
    @common.Param() params: PasswordEntryWhereUniqueInput,
    @common.Body() data: PasswordEntryUpdateInput
  ): Promise<PasswordEntry | null> {
    try {
      return await this.service.updatePasswordEntry({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          notes: true,
          password: true,
          title: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },

          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PasswordEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePasswordEntry(
    @common.Param() params: PasswordEntryWhereUniqueInput
  ): Promise<PasswordEntry | null> {
    try {
      return await this.service.deletePasswordEntry({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          notes: true,
          password: true,
          title: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },

          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
